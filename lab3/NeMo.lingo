structure = declaration*:d delimetrs instruction:i delimetrs {
    debug(NemoStructure(:d, :i))
};

declaration = "var" delimetrs name:a delimetrs ":" delimetrs type:t delimetrs ";" delimetrs {
    debug(NemoDeclaration(:a, :t))
};

instruction = assign | test | loop | sequence;

expression = const | operation_un | operation_bin| var;

sequence = "{" delimetrs instruction*:q delimetrs "}" delimetrs { 
    debug(NemoSequence(:q))
};

test = "(" delimetrs expression:e1 delimetrs condition$s delimetrs expression:e2 delimetrs ")" delimetrs "?" delimetrs ";" delimetrs { 
    debug(NemoTest($s, :e1, :e2))
};

assign = name:a delimetrs ":=" delimetrs expression:e ";" delimetrs {
    debug(NemoAssign(:a, :e))
};


loop = "*" delimetrs test:b delimetrs {
    debug(NemoCycle(:b))
};


const = some_digit$s delimetrs {
    debug(NemoInt(s2i($s)))
};

operation_un = ("-")+ $s delimetrs expression:e delimetrs {
	NemoUnary($s, :e)
};

operation_bin = "(" delimetrs expression:l delimetrs ("+"|"*"|"/"|"-"|"%")+ $s delimetrs expression:r delimetrs ")" delimetrs {
    NemoBinary($s, :l, :r) 
};

type = int | array;

int = "int" delimetrs {
   debug(NemoDeclarationInt())
};

array = "[" delimetrs type:t delimetrs "]" delimetrs {
    NemoDeclarationArr(:t)
};

var = name:a { 
    debug(NemoVar(:a))
};										

name = word$s {
    $s 
};

word = (some_letter maybe_digit);
some_letter = ('a'-'z')+;
maybe_letter = ('a'-'z')*;
some_digit  = ('0'-'9')+;
maybe_digit  = ('0'-'9')*;
condition = ("!=" | "==" | "<=" | ">=" | "<" | ">")+;
delimetrs = (' ' | '\t' | '\n' | '\r')*;