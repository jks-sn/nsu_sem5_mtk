import ds/array;
import ds/set;
import ds/tree;
import string;
import lingo/pegcode/driver;
import maybe;

export {
	NemoStructure(declarations : [NemoDeclaration], instruction : NemoInstruction);

	NemoType ::= NemoInt, NemoArr;
	NemoInt(value : int);
	NemoArr(arr : [NemoType]);
	NemoVar(name : string);
	NemoState(vars : Tree<string, NemoType>);
	
	NemoDeclaration(var : string, type : NemoDeclarationType);
	NemoDeclarationType ::= NemoDeclarationInt, NemoDeclarationArr;
	NemoDeclarationInt();
	NemoDeclarationArr(type : NemoDeclarationType);

	NemoExpression ::= NemoUnary, NemoBinary, NemoVar, NemoInt;
	NemoUnary(operation: string, expression : NemoExpression);
	NemoBinary(operation: string, left_action : NemoExpression, right_action : NemoExpression);

	NemoInstruction ::= NemoAssign, NemoTest, NemoSelect,  NemoCycle, NemoSequence;
	NemoSequence(instructions : [NemoInstruction]);
	NemoAssign(var : string, value : NemoExpression);
	NemoTest(condition : string, true_action : NemoExpression, false_action : NemoExpression);
	NemoCycle(body : NemoInstruction);
	NemoStructure_to_string(structure : NemoStructure) -> string;
	NemoType_to_string(type : NemoDeclarationType) -> string;
	NemoDeclaration_to_string(declaration : NemoDeclaration) -> string;
	NemoExpression_to_string(expression : NemoExpression) -> string;
	NemoInstruction_to_string(instruction : NemoInstruction) -> string;
	string_to_Nemo(str : string) -> NemoStructure;
}

NemoStructure_to_string(structure : NemoStructure) -> string {
	strGlue(map(structure.declarations, NemoDeclaration_to_string), "\n") + "\n" + NemoInstruction_to_string(structure.instruction) + "\n";
}

NemoType_to_string(type : NemoDeclarationType) -> string {
	switch (type) {
		NemoDeclarationInt(): "int";
		NemoDeclarationArr(arr): "[" + NemoType_to_string(arr) + "]";
	}
}

NemoDeclaration_to_string(declaration : NemoDeclaration) -> string {
	"var " + declaration.var + " : " + NemoType_to_string(declaration.type) + ";"
}

NemoExpression_to_string(expression : NemoExpression) -> string {
	switch (expression) {
		NemoUnary(operation, expr): operation + " " + NemoExpression_to_string(expr);
		NemoBinary(operation, correct_action, incorrect_action): "(" + NemoExpression_to_string(correct_action) + " " + operation + " " + NemoExpression_to_string(incorrect_action) + ")";
		NemoVar(name): name;
		NemoInt(value): i2s(value);
	}
}

NemoInstruction_to_string(instruction : NemoInstruction) -> string {
	switch (instruction) {
		NemoAssign(variable, expression): variable + " := " + NemoExpression_to_string(expression);
		NemoSequence(instructions): "{\n" + strGlue(map(instructions, \s -> strGlue(map(strSplit(NemoInstruction_to_string(s), "\n"), \split_str -> "" + split_str), "\n")), ";\n") + "\n}\n";
		NemoTest(condition, correct_action, incorrect_action): "(" + NemoExpression_to_string(correct_action) + " " + condition + " " + NemoExpression_to_string(incorrect_action) + ")?"; 		NemoCycle(body): "*" + NemoInstruction_to_string(body);
	}
}

string_to_Nemo(str : string) -> NemoStructure {
	nemo_grammar = "#include NeMo.lingo";
	parsic(compilePegGrammar(nemo_grammar), str, SemanticActions(mergeTree(defaultPegActions.t,pairs2tree([Pair("Condition", \s : [flow] -> NemoSelect([NemoSequence([NemoTest(s[0], s[1], s[2]), s[3]]), NemoSequence([NemoTest(if (s[0] == "==") "!=" else
																																													if (s[0] == "!=") "==" else
																	 																												if (s[0] == "<") ">=" else
																	 																												if (s[0] == ">") "<=" else
																	 																												if (s[0] == "<=") ">" else
																	 																												if (s[0] == ">=") "<" else "", s[1], s[2]), s[4]])])),
				Pair("Cycle", \s : [flow] -> NemoSequence([NemoCycle(NemoSequence([NemoTest(s[0], s[1], s[2]), s[3]])), NemoTest(if (s[0] == "==") "!=" else
																																											   if (s[0] == "!=") "==" else
																																											   if (s[0] == "<") ">=" else
																																											   if (s[0] == ">") "<=" else
																																											   if (s[0] == "<=") ">" else
																																											   if (s[0] == ">=") "<" else "", s[1], s[2])])),]))));
}